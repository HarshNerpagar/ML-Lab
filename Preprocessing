import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder, MinMaxScaler

# ----------------------------
# 1. Load the Data and Inspect
# ----------------------------
df = sns.load_dataset('titanic')
print("Dataset Shape:", df.shape)
print("First 5 rows:\n", df.head())

# ----------------------------
# 2. Handling Missing Data
# ----------------------------
print("\nMissing values in each column:\n", df.isnull().sum())

# Fill missing values for 'age' with mean
df['age'].fillna(df['age'].mean(), inplace=True)
# Fill missing values for 'embark_town' with mode
df['embark_town'].fillna(df['embark_town'].mode()[0], inplace=True)
# Drop 'deck' column due to high missing values
df.drop(columns=['deck'], inplace=True)

print("\nMissing values after imputation:\n", df.isnull().sum())

# ----------------------------
# 3. Correlation Analysis
# ----------------------------
corr_matrix = df.select_dtypes(include=[np.number]).corr()
print("\nCorrelation Matrix:\n", corr_matrix)

plt.figure(figsize=(10, 6))
sns.heatmap(corr_matrix, annot=True, cmap='viridis')
plt.title("Feature Correlation Heatmap")
plt.show()

# ----------------------------
# 4. Encoding Techniques
# ----------------------------
le = LabelEncoder()
df['sex'] = le.fit_transform(df['sex'])

df = pd.get_dummies(df, columns=['embark_town'], drop_first=True)

print("\nData after encoding:\n", df.head())

# ----------------------------
# 5. Scaling Numerical Features
# ----------------------------
scaler = MinMaxScaler()
numerical_cols = ['age', 'fare']
df[numerical_cols] = scaler.fit_transform(df[numerical_cols])

print("\nScaled Numerical Columns:\n", df[numerical_cols].head())

# ----------------------------
# 6. Simple Graphs for EDA
# ----------------------------

# Histogram: Age Distribution
plt.figure(figsize=(8, 4))
sns.histplot(df['age'], bins=20, kde=False)
plt.title("Age Distribution")
plt.xlabel("Normalized Age")
plt.show()

# Bar Plot: Class Distribution
plt.figure(figsize=(6, 4))
sns.countplot(x='class', data=df, palette='pastel')
plt.title("Passenger Class Distribution")
plt.xlabel("Class")
plt.ylabel("Count")
plt.show()

# Bar Plot: Survival Counts
plt.figure(figsize=(6, 4))
sns.countplot(x='survived', data=df, palette='coolwarm')
plt.title("Survival Counts")
plt.xlabel("Survived")
plt.ylabel("Count")
plt.show()
